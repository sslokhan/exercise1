extends layout
block content
    head
      meta(charset='utf-8')
      meta(http-equiv='X-UA-Compatible', content='IE=edge')
      meta(name='viewport', content='width=device-width, initial-scale=1')
      script(src='js/jquery.js')
      script(type='text/javascript', src='js/d3.js')
      script(type='text/javascript', src='js/crossfilter.js')
      script(type='text/javascript', src='js/dc.js')
      script(type='text/javascript', src='js/jquery.js')
      script(type='text/javascript', src='js/bootstrap.min.js')
      script(type='text/javascript', src='js/Chart.min.js')
      link(rel='stylesheet', type='text/css', href='css/dc.css')
      link(rel='stylesheet', href='css/bootstrap.min.css')
    body
      .container(style='margin: auto;margin-top:60px;margin-bottom:60px;')
        h4
          | This Page is interactive; click or hover over each visualization to see more infromation
        br
        br
        br
        br
        br
        .row
          .col-md-6
            #sex.dc-chart
              h5 Client Sex
          .col-md-6
            #year.dc-chart
              h5 Year of Registration
        br
        br
        br
        br
        br
        br
        .row
          .col-md-6
            #arrival.dc-chart
              h5 Saving Goals Completed 
          .col-md-6
            #completion.dc-chart
              h5 Saving Goals Completed in each year 
        br
        br
        br
        br
        br
        br
        .row
          h5  Village Target and Village Population
          .col-md-12
            canvas#village.chart
        br
        br
        br
        br
        br
        br
        .row
          .col-md-6
            #goal.dc-chart
              h5 Goals Items Completed
          .col-md-6
            #goal_years.dc-chart
              h5 Goal Items Completed in Each Year
        br
        br
        br
        br
        br
        br
        .row
          .col-md-12
            #land.dc-chart
              h5 Land Size Trends for Goal Items
    style.
      body {
      font: 10px sans-serif;
      }
      .arc path {
      stroke: #fff;
      }
    script(type='text/javascript').
      var genderChart = dc.pieChart("#sex");
      var savingChart = dc.pieChart("#arrival");
      var savingChartYear = dc.rowChart("#completion");
      var arrivalChart = dc.rowChart("#year");
      var goalChart = dc.pieChart("#goal");
      var arrivalChartGoal = dc.rowChart("#goal_years");
      var landChart = dc.rowChart("#land");
      var ctx = document.getElementById("village");
      d3.csv("data/Savings_Goal__c.csv", function(error, experiments) {
      var ndx = crossfilter(experiments);
      all2 = ndx.groupAll();
      savingDim = ndx.dimension(function(d) {if (d.Savings_Goal_Amount__c-d.Amount_Saved__c==0) return "Complete"; else if (d.Savings_Goal_Amount__c-d.Amount_Saved__c!=d.Savings_Goal_Amount__c) return 'Partially Complete'; else return "Saved No Money";});
      savingGroup = savingDim.group();
      savingYearDim=ndx.dimension(function(d) {if (d.Year__c!=0 && d.Year__c!=2016) return (d.Year__c) | 0;});
      savingYearGroup=savingYearDim.group();
      /*var completion_year=[0,0,0,0];
      var total_year=[0,0,0,0]
      console.log(experiments[0]);
      for (i=0; i<experiments.length; i++)
      {
      total_year[experiments[i].Year__c-2012]++;
      if(experiments[i].Savings_Goal_Amount__c - experiments[i].Amount_Saved__c==0)
      {
      if(experiments[i].Year__c==2012)
      completion_year[0]++;
      else if(experiments[i].Year__c==2013)
      completion_year[1]++;
      else if(experiments[i].Year__c==2014)
      completion_year[2]++;
      else if(experiments[i].Year__c==2015)
      completion_year[3]++;
      }
      }
      for(i=0;i<completion_year.length;i++)
      {
      completion_year[i]=Math.floor(completion_year[i]/total_year[i]*100);
      }
      document.getElementById("2012").innerHTML="2012: "+completion_year[0]+"%";
      document.getElementById("2013").innerHTML="2013: "+completion_year[1]+"%";
      document.getElementById("2014").innerHTML="2014: "+completion_year[2]+"%";
      document.getElementById("2015").innerHTML="2015: "+completion_year[3]+"%";
      */
      savingChart.width(250).height(250)
      .slicesCap(3)
      .innerRadius(30)
      .dimension(savingDim)
      .group(savingGroup)
      .label(function (d) {
      if (savingChart.hasFilter() && !savingChart.hasFilter(d.key)) {
      return d.key + '(0%)';
      }
      var label = d.key;
      if (all2.value()) {
      label += '(' + Math.floor(d.value / all2.value() * 100) + '%)';
      }
      return label;
      });
      savingChartYear.width(600).height(250)
      .dimension(savingYearDim)
      .group(savingYearGroup)
      .elasticX(true)
      .renderLabel(true)
      .title(function (d) {return d.key + ": "+d.value+" individuals";})
      .colors(['#65A0A9'])
      .colorDomain([1,8])
      .colorAccessor(function(d, i){return 1;})
      .xAxis().ticks(5).tickFormat(d3.format("s"));
      dc.renderAll();
      });
      d3.csv("data/Village__c.csv", function(error, experiments) {
      experiments=experiments.sort(function(a, b){
      return b.Target_Population__c - a.Target_Population__c;
      });
      experiments=experiments.slice(0,10);
      var label=[],data=[],data_total=[];
      for (i=0;i<10;i++) {
      label[i]=experiments[i].Name;
      data[i]=experiments[i].Target_Population__c;
      data_total[i]=experiments[i].Population__c;
      }
      var barOptions_stacked = {
      scales: {
      xAxes: [{
      ticks: {
      beginAtZero:true,
      fontSize:11
      },
      scaleLabel:{
      display:false
      },
      gridLines: {
      },
      stacked: true
      }],
      yAxes: [{
      gridLines: {
      display:false,
      color: "#fff",
      zeroLineColor: "#fff",
      zeroLineWidth: 0
      },
      ticks: {
      fontFamily: "'Open Sans Bold', sans-serif",
      fontSize:11
      },
      stacked: true
      }]
      }
      };
      var data = {
      labels: label,
      datasets: [
      {
      label: "Population Targeted",
      backgroundColor: [
      'rgba(255, 99, 132, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(255, 206, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)',
      'rgba(153, 102, 255, 0.2)',
      'rgba(255, 159, 64, 0.2)',
      'rgba(255, 99, 132, 0.2)',
      'rgba(54, 162, 235, 0.2)',
      'rgba(255, 206, 86, 0.2)',
      'rgba(75, 192, 192, 0.2)'
      ],
      borderColor: [
      'rgba(255,99,132,1)',
      'rgba(54, 162, 235, 1)',
      'rgba(255, 206, 86, 1)',
      'rgba(75, 192, 192, 1)',
      'rgba(153, 102, 255, 1)',
      'rgba(255, 159, 64, 1)',
      'rgba(255,99,132,1)',
      'rgba(54, 162, 235, 1)',
      'rgba(255, 206, 86, 1)',
      'rgba(75, 192, 192, 1)',
      'rgba(153, 102, 255, 1)'
      ],
      borderWidth: 1,
      data: data
      },
      {
      label:"Total Population",
      data:data_total
      }
      ]
      };
      var myBarChart = new Chart(ctx, {
      type: 'bar',
      data: data,
      options: barOptions_stacked
      });
      });
      d3.csv("data/Client__c.csv", function(error, experiments) {
      var ndx = crossfilter(experiments);
      genderDim = ndx.dimension(function(d) {if (d.Sex__c=='') return 'Unknown'; else return d.Sex__c;});
      genderGroup = genderDim.group();
      all = ndx.groupAll();
      arrivalDim           = ndx.dimension(function(d) {return d.CreatedDate.substr(0,4);}),
      arrivalGroup          = arrivalDim.group().reduceCount();
      genderChart.width(250).height(250)
      .slicesCap(3)
      .innerRadius(30)
      .dimension(genderDim)
      .group(genderGroup)
      .label(function (d) {
      if (genderChart.hasFilter() && !genderChart.hasFilter(d.key)) {
      return d.key + '(0%)';
      }
      var label = d.key;
      if (all.value()) {
      label += '(' + Math.floor(d.value / all.value() * 100) + '%)';
      }
      return label;
      });
      arrivalChart.width(600).height(250)
      .dimension(arrivalDim)
      .group(arrivalGroup)
      .elasticX(true)
      .renderLabel(true)
      .title(function (d) {return d.key + ": "+d.value+" individuals";})
      .colors(['#65A0A9'])
      .colorDomain([1,8])
      .colorAccessor(function(d, i){return 1;})
      .xAxis().ticks(5).tickFormat(d3.format("s"));
      dc.renderAll();
      });
      d3.csv("data/Goal_items__c.csv", function(error, experiments) {
      var ndx = crossfilter(experiments);
      goalDim = ndx.dimension(function(d) {return d.Status__c});
      goalGroup = goalDim.group();
      all_goal = ndx.groupAll();
      arrivalDim = ndx.dimension(function(d) {return d.CreatedDate.substr(0,4);}),
      arrivalGroup = arrivalDim.group().reduceCount();
      landDim = ndx.dimension(function(d) {return parseFloat(d.Desired_Units__c);}),
      landGroup = landDim.group().reduceCount();
      goalChart.width(250).height(250)
      .slicesCap(3)
      .innerRadius(30)
      .dimension(goalDim)
      .group(goalGroup)
      .label(function (d) {
      if (genderChart.hasFilter() && !genderChart.hasFilter(d.key)) {
      return d.key + '(0%)';
      }
      var label = d.key;
      if (all.value()) {
      label += '(' + Math.floor(d.value / all_goal.value() * 100) + '%)';
      }
      return label;
      });
      arrivalChartGoal.width(600).height(250)
      .dimension(arrivalDim)
      .group(arrivalGroup)
      .elasticX(true)
      .renderLabel(true)
      .title(function (d) {return d.key + ": "+d.value+" individuals";})
      .colors(['#65A0A9'])
      .colorDomain([1,8])
      .colorAccessor(function(d, i){return 1;})
      .xAxis().ticks(5).tickFormat(d3.format("s"));
      landChart.width(800).height(250)
      .dimension(landDim)
      .group(landGroup)
      .elasticX(true)
      .renderLabel(true)
      .title(function (d) {return d.key + ": "+d.value+" individuals";})
      .colors(['#65A0A9'])
      .colorDomain([1,8])
      .colorAccessor(function(d, i){return 1;})
      .xAxis().ticks(5).tickFormat(d3.format("s"));
      dc.renderAll();
      });

